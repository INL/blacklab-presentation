BlackLab:
past, present and future
(or: two steps back, one step forward..?)



TL;DL version:
- what is it?
  corpus search system, similar to CWB, but based on Lucene ("reverse index" text search system)
- similarities and differences to CWB?
  different way of resolving searches;
  certain searches can be faster, others slower;
  roughly comparable performance for many queries
- why consider using it?
  Easy to use
  Easy to write analysis scripts
  Accepts multiple input formats, both XML and non-XML formats, add your own
  Can support multiple query languages
  Use as web service, Java library or try it in the web application
- future plans?
  integration with Solr and/or ElasticSearch
  scalability, distributed search
  treebanks


PAST

Why was it developed?
- corpora are a big part of our institute, both as part of our "core mission" and as part of collaborative projects with other institutes
- we deal with large datasets in different formats in different projects
- we wanted the flexibility to add things like an alternative query language
- we wanted a modular design that's easy to maintain and extend
- we relied on Lucene for other projects and wanted to benefit from our experience and that project's continued development
- we wanted to be able to use it as a library or web service
- we wanted to be able to show full document contents with highlighting for abritrarily complex queries,
  optionally even in things like scanned document images
- we preferred something that integrated with our JVM ecosystem.

How/when was it developed?
- over the past 7 years
- "in the real world", as part of several projects, each with their own requirements
- both large collaborative projects (IMPACT, CLARIN, CLARIAH) and our internal corpora
- 4 different people worked on it in some capacity, but I'm the main developer and wrote 80%+ of the code


PRESENT

What do we use it for?
- several different Dutch corpora, both historic and contemporary
  largest is currently a corpus of contemporary Dutch of around 1.5 billion tokens
- performing analyses of our corpora; quick scripts to find collocations,
  earliest citations of words, etc.

Status
- Open sourced in 2012
- Project site with extensive documentation
- Well-tested
- Clever about rewriting queries to execute more efficiently
- Happy users in Netherlands, Belgium, South Africa, USA, Japan, China
- CLARIN FCS integration (based on LJO's code): v1 supported, v2
  working internally, now refining it

(Rough) comparison with CWB
- different way of resolving searches, although our approaches are growing closer
  (explain)
- certain searches can be faster, others slower
  some examples:

Query times on Parliamentary Proceedings Corpus

[pos="AA.*"] [lemma="krokodil"]                  73 hits, CWB 13s,  BL 48ms
"beslissing" "om" "niet" "te" [pos="VRB.*"]       8 hits, CWB 60ms, BL 273ms
[pos="NOU.*"] "om" "te" [pos="VRB.*"]         76660 hits, CWB 50s,  BL 22s
[pos="VRB.*"]{7}                               1672 hits, CWB 38s,  BL 17s
[pos="AA.*"]+ [pos="NOU.*"] [pos="VRB.*=n.*" & lemma="doen"] [pos="AA.*"]+ [pos="NOU.*"]
                                                 95 hits, CWB 24s,  BL 25s

  (not supposed to be an exhaustive or representative test, just to give an indication)

- not all of CWB's features are supported yet, but the most common are and the rest
  could be added quite easily
  (examples)

  supported:
  * searching annotations
  * within/containing
  * global constraints
  * paging, sampling
  * XML tags (structural attributes) (slightly different syntax)
  * frequency lists ("grouping results")
  * sort/group on context words (matching text or words to the left/right)
  * word lists (substitution mechanism in BLS)

  not yet supported:
  * set operations like union, intersection, difference (fairly easy to add)
  * macros
  * some minor functionality (haven't done an exhaustive comparison)
  * some syntactic details (CQL is a slight mix between CWB and Sketch Engine)
  * some advanced and probably less-used stuff

- designed as a first-class programming API and web service first, not primarily
  an end-user tool.

Strong points
- Fast with many types of queries thanks to Lucene's reverse index
  "least frequent term" in query allows us to quickly eliminate potential matches;
  efficient on disk cache. Benefits from having both reverse and forward matching 
  strategies available to it.
- Easy to use in several ways (library, web service, end-user application)
- Easy to index the data format you already have without having to convert it first;
  easy to fetch the original contents and highlight hits in it
- (Fairly) easy to extend with new ways to query, specific optimizations, etc.


SEE IT IN ACTION (OR AS SLIDES...)

- example of using AutoSearch to quickly index and search data
  explain difficulty of making things both easy and full-featured
  (mention Query Builder obviously inspired by Korp's, with some slight differences)
- show BLS URLs,
  explain what BLS takes care of for you,
  example of an analysis script
- (very quickly) show Java API, project site, API reference docs


FUTURE

Wish list
- optimize for increasing ubiquity of SSDs; this will make "forward matching" 
  more attractive, although reverse matching remains important to quickly reduce 
  the amount of work.
- works well, but certain types of queries are slower with larger corpora
  (mostly scales with result set size, not corpus size)
- searching in treebanks is growing in importance, but we don't see CQL going away;
  it would be nice to unite both ways of searching in one system
- both Solr and ElasticSearch are extremely popular, mature and active projects,
  and provide a lot of value that we would like to take advantage of.
  Examples: statistical analyses, faceting, etc. For us: less code to maintain.
  For others: even easier to integrate into existing workflow? Even more trusted,
  solid foundation?



